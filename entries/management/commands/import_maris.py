import pandas as pd
from django.core.management.base import BaseCommand
from django.db import transaction
from entries.models import MarisInput


class Command(BaseCommand):
    help = "Import d·ªØ li·ªáu Maris t·ª´ Excel v√†o DB"

    def add_arguments(self, parser):
        parser.add_argument("file_path", type=str, help="ƒê∆∞·ªùng d·∫´n file Excel")
        parser.add_argument(
            "--sheet",
            type=str,
            default=0,
            help="T√™n sheet ho·∫∑c ch·ªâ s·ªë (0 = sheet ƒë·∫ßu ti√™n). M·∫∑c ƒë·ªãnh = 0"
        )
        parser.add_argument(
            "--save",
            action="store_true",
            help="N·∫øu c√≥ c·ªù n√†y th√¨ s·∫Ω l∆∞u v√†o DB, m·∫∑c ƒë·ªãnh ch·ªâ test"
        )

    def handle(self, *args, **options):
        file_path = options["file_path"]
        sheet_name_opt = options["sheet"]
        test_mode = not options["save"]  # m·∫∑c ƒë·ªãnh test_mode = True

        # sheet_name c√≥ th·ªÉ l√† s·ªë ho·∫∑c t√™n -> th·ª≠ convert sang int n·∫øu ƒë∆∞·ª£c
        try:
            sheet_name = int(sheet_name_opt)
        except Exception:
            sheet_name = sheet_name_opt

        # ƒê·ªçc Excel (c√≥ d√πng sheet_name)
        df = pd.read_excel(file_path, header=0, sheet_name=sheet_name)
        print("Columns:", df.columns.tolist())  # In ra danh s√°ch c·ªôt ƒë·ªÉ ki·ªÉm tra
        self.stdout.write(self.style.NOTICE(f"ƒê·ªçc {len(df)} d√≤ng d·ªØ li·ªáu t·ª´ {file_path}"))

        records = []

        def split_to_dict(cell):
            """
            Chuy·ªÉn 'CODE:VAL,CODE2:VAL2' th√†nh dict {CODE: VAL}.
            Tr·∫£ {} n·∫øu cell r·ªóng/NaN.
            """
            d = {}
            if pd.notna(cell):
                for item in str(cell).split(","):
                    item = item.strip()
                    if ":" in item:
                        code, val = item.split(":", 1)
                        d[code.strip()] = val.strip()
            return d

        def parse_dlnc_with_cases(dlnc_raw):
            """
            Parse Dl Nc Product th√†nh:
              - dlnc_dict: { code: dlnc_value }
              - case_dict: { code: case_value }  (case_value = "" n·∫øu token kh√¥ng c√≥ |Case)
            Quy t·∫Øc:
              - M·ªói token c√≥ d·∫°ng "CODE:VAL" ho·∫∑c "CODE:VAL|Case"
              - N·∫øu token c√≥ "|Case" th√¨ case g√°n cho ƒë√∫ng m√£ ƒë√≥.
              - N·∫øu token kh√¥ng c√≥ "|Case" th√¨ m√£ ƒë√≥ c√≥ case = "".
              - C√°c m√£ trong Production m√† kh√¥ng xu·∫•t hi·ªán trong Dl Nc Product => dlnc="", case=""
            """
            dlnc_dict = {}
            case_dict = {}
            if not dlnc_raw or pd.isna(dlnc_raw):
                return dlnc_dict, case_dict

            for token in [t.strip() for t in str(dlnc_raw).split(",") if t.strip()]:
                # token c√≥ th·ªÉ l√† "CODE:VAL" ho·∫∑c "CODE:VAL|Case"
                if "|" in token:
                    left, case_part = token.split("|", 1)
                    left = left.strip()
                    case_part = case_part.strip()
                else:
                    left = token
                    case_part = ""

                if ":" in left:
                    code, val = left.split(":", 1)
                    code = code.strip()
                    val = val.strip()
                    dlnc_dict[code] = val
                    case_dict[code] = case_part  # n·∫øu case_part == "" th√¨ r·ªóng

            return dlnc_dict, case_dict

        for _, row in df.iterrows():
            # B·ªè qua d√≤ng tr·ªëng
            if pd.isna(row.get("Date")):
                continue

            # ----- MAIN DATA (Production + Dl Nc Product + Reject/Scrap/Screen/Vis Slab) -----
            productions = []

            if pd.notna(row.get("Production")):
                # parse production (c√≥ th·ªÉ nhi·ªÅu code)
                prods = split_to_dict(row.get("Production"))

                # parse DLNC (per-code + c√≥ th·ªÉ per-code case)
                dlnc_raw = row.get("Dl Nc Product")
                dlnc_dict, case_dict = parse_dlnc_with_cases(dlnc_raw)

                # parse c√°c c·ªôt kh√°c th√†nh per-code dict
                reject_dict = split_to_dict(row.get("Reject Shaker"))
                scrap_dict = split_to_dict(row.get("Scrap Die"))
                screen_dict = split_to_dict(row.get("Screen Changer"))
                visslab_dict = split_to_dict(row.get("Vis Slab"))

                # Gh√©p d·ªØ li·ªáu cho t·ª´ng productCode trong Production
                for code, qty in prods.items():
                    productions.append({
                        "productCode": code,
                        "goodPro": qty,
                        "dlnc": dlnc_dict.get(code, ""),      # n·∫øu kh√¥ng c√≥ -> ""
                        "case": case_dict.get(code, ""),      # n·∫øu kh√¥ng c√≥ -> ""
                        "reject": reject_dict.get(code, ""),
                        "scrap": scrap_dict.get(code, ""),
                        "screen": screen_dict.get(code, ""),
                        "visslab": visslab_dict.get(code, "")
                    })

            # ----- STOP TIMES -----
            stop_times = []
            if pd.notna(row.get("StopTime")):
                for item in str(row["StopTime"]).split(","):
                    if ":" in item:
                        k, v = item.split(":", 1)
                        stop_times.append({"stopTime": k.strip(), "hour": v.strip()})

            # ----- PROBLEMS -----
            problems = []
            if pd.notna(row.get("Problem")):
                for item in str(row["Problem"]).split(","):
                    if ":" in item:
                        k, v = item.split(":", 1)
                        problems.append({"problem": k.strip(), "hour": v.strip()})

            # ----- COMMENT -----
            comment = row.get("Comment For Stop Time")
            comment = str(comment).strip() if pd.notna(comment) else None

            # ----- Shift + Employee x·ª≠ l√Ω NaN -----
            shift = row["Shift"] if pd.notna(row.get("Shift")) else None
            employee = row["Operator"] if pd.notna(row.get("Operator")) else None

            # ----- Parse date (∆∞u ti√™n format dd/mm/YYYY, fallback dayfirst) -----
            try:
                date_val = pd.to_datetime(row["Date"], format="%d/%m/%Y").date()
            except Exception:
                date_val = pd.to_datetime(row["Date"], dayfirst=True).date()

            # ----- T·∫°o object -----
            records.append(MarisInput(
                date=date_val,
                shift=shift,
                employee=employee,
                mainData=productions if productions else [],  # JSONField kh√¥ng cho null
                stopTimes=stop_times if stop_times else None,
                problems=problems if problems else None,
                comment=comment
            ))

        # ----- L∆∞u DB ho·∫∑c Preview -----
        if test_mode:
            self.stdout.write(self.style.NOTICE("‚ö†Ô∏è Ch·∫ø ƒë·ªô TEST: D·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c l∆∞u v√†o DB"))
            self.stdout.write(self.style.NOTICE("Preview c√°c b·∫£n ghi (v√≠ d·ª• 270->275):"))
            for i, r in enumerate(records[270:275], start=1):
                self.stdout.write(
                    self.style.NOTICE(
                        f"{i}. Date={r.date}, Shift={r.shift}, Employee={r.employee}, "
                        f"MainData={r.mainData}, StopTimes={r.stopTimes}, Problems={r.problems}, Comment={r.comment}"
                    )
                )
            self.stdout.write(self.style.WARNING(f"T·ªïng s·ªë b·∫£n ghi ƒë·ªçc ƒë∆∞·ª£c: {len(records)}"))
        else:
            with transaction.atomic():
                # X√ìA H·∫æT D·ªÆ LI·ªÜU C≈®
                deleted_count, _ = MarisInput.objects.all().delete()
                self.stdout.write(self.style.WARNING(f"üóë ƒê√£ x√≥a {deleted_count} b·∫£n ghi c≈© trong DB"))

                # T·∫†O D·ªÆ LI·ªÜU M·ªöI
                MarisInput.objects.bulk_create(records, batch_size=500)

            self.stdout.write(self.style.SUCCESS(f"‚úÖ ƒê√£ import {len(records)} d√≤ng m·ªõi v√†o DB"))

